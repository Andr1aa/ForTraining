/* task 1
მოცემულია IT კომპანიის თანამშრომლების მასივი მათი უნარებით, ხელფასებით და პროექტებით.
განახორციელეთ შემდეგი ფუნქციები:

1. getEmployeeProfiles(employees)
   - შექმენით თითოეული თანამშრომლის პროფილი
   - დააბრუნეთ ობიექტი რომელიც შეიცავს: სრული სახელი, განყოფილება, უნარების სია (დაყოფილი მძიმით)
   - [{fullName: "John Smith", department: "Frontend", skillsText: "React, TypeScript, CSS"}]

2. getHighPerformers(employees, salaryThreshold, minProjects)
   - გაფილტრეთ თანამშრომლები რომლებსაც აქვთ ხელფასი >= salaryThreshold და მინიმუმ minProjects პროექტი
   - დააბრუნეთ მხოლოდ მათი სრული სახელები
   - ["Alice Johnson", "Bob Wilson", ...]

3. getDepartmentAnalytics(employees)
   - გამოთვალეთ თითოეული განყოფილების სტატისტიკა
   - დააბრუნეთ ობიექტი სადაც key არის განყოფილების სახელი და value არის:
     {employeeCount: რაოდენობა, averageSalary: საშუალო ხელფასი, totalProjects: პროექტების ჯამი}
   - {Frontend: {employeeCount: 5, averageSalary: 75000, totalProjects: 23}, ...}

4. getSkillExperts(employees, requiredSkills)
   - იპოვეთ თანამშრომლები რომლებსაც აქვთ ყველა მოთხოვნილი უნარი
   - requiredSkills არის სტრიქონების მასივი
   - დააბრუნეთ მასივი ობიექტებით: {name: სრული სახელი, matchingSkills: რამდენი უნარი ემთხვევა}
   - [{name: "Alice Johnson", matchingSkills: 3}, ...]

5. getSkillsReport(employees, targetSkills)
   - შექმენით რეპორტი მოცემული უნარების შესახებ
   - targetSkills არის სტრიქონი, უნარები დაყოფილი მძიმით
   - დააბრუნეთ ობიექტი რომელიც შეიცავს:
     * totalEmployees: ჯამური თანამშრომლების რაოდენობა
     * skillCoverage: ობიექტი სადაც key არის უნარი, value არის რამდენ ადამიანს აქვს ეს უნარი
     * expertsPerSkill: ობიექტი სადაც key არის უნარი, value არის ამ უნარის მქონე ადამიანების სახელების სია (დაყოფილი მძიმით)
   - {totalEmployees: 26, skillCoverage: {React: 4, CSS: 8}, expertsPerSkill: {React: "Alice Johnson,Frank Taylor,Maya Garcia,Tina Young"}}

მოთხოვნები:
- არ შეცვალოთ ორიგინალი მონაცემები
*/

const employees = [
  {
    firstName: "Alice",
    lastName: "Johnson",
    department: "Frontend",
    salary: 85000,
    skills: ["React", "TypeScript", "CSS", "JavaScript", "HTML"],
    projectsCompleted: 12
  },
  {
    firstName: "Bob",
    lastName: "Wilson",
    department: "Backend",
    salary: 92000,
    skills: ["Node.js", "Python", "MongoDB", "PostgreSQL", "Docker"],
    projectsCompleted: 15
  },
  {
    firstName: "Carol",
    lastName: "Davis",
    department: "Frontend",
    salary: 78000,
    skills: ["Vue.js", "JavaScript", "CSS", "HTML", "Sass"],
    projectsCompleted: 8
  },
  {
    firstName: "David",
    lastName: "Miller",
    department: "DevOps",
    salary: 95000,
    skills: ["AWS", "Docker", "Kubernetes", "Jenkins", "Terraform"],
    projectsCompleted: 10
  },
  {
    firstName: "Emma",
    lastName: "Brown",
    department: "Backend",
    salary: 88000,
    skills: ["Java", "Spring", "MySQL", "Redis", "Kafka"],
    projectsCompleted: 13
  },
  {
    firstName: "Frank",
    lastName: "Taylor",
    department: "Frontend",
    salary: 82000,
    skills: ["React", "JavaScript", "CSS", "Redux", "HTML"],
    projectsCompleted: 9
  },
  {
    firstName: "Grace",
    lastName: "Anderson",
    department: "Mobile",
    salary: 90000,
    skills: ["React Native", "iOS", "Swift", "JavaScript", "TypeScript"],
    projectsCompleted: 11
  },
  {
    firstName: "Henry",
    lastName: "Thomas",
    department: "Backend",
    salary: 87000,
    skills: ["Python", "Django", "PostgreSQL", "Redis", "Celery"],
    projectsCompleted: 14
  },
  {
    firstName: "Ivy",
    lastName: "Jackson",
    department: "Frontend",
    salary: 79000,
    skills: ["Angular", "TypeScript", "RxJS", "CSS", "HTML"],
    projectsCompleted: 7
  },
  {
    firstName: "Jack",
    lastName: "White",
    department: "DevOps",
    salary: 93000,
    skills: ["Azure", "Docker", "Ansible", "Python", "Bash"],
    projectsCompleted: 12
  },
  {
    firstName: "Kate",
    lastName: "Harris",
    department: "Mobile",
    salary: 86000,
    skills: ["Flutter", "Dart", "Firebase", "iOS", "Android"],
    projectsCompleted: 10
  },
  {
    firstName: "Liam",
    lastName: "Martin",
    department: "Backend",
    salary: 91000,
    skills: ["Go", "gRPC", "PostgreSQL", "Docker", "Kubernetes"],
    projectsCompleted: 16
  },
  {
    firstName: "Maya",
    lastName: "Garcia",
    department: "Frontend",
    salary: 84000,
    skills: ["React", "Next.js", "TypeScript", "GraphQL", "CSS"],
    projectsCompleted: 11
  },
  {
    firstName: "Noah",
    lastName: "Rodriguez",
    department: "Backend",
    salary: 89000,
    skills: ["Ruby", "Rails", "PostgreSQL", "Redis", "Sidekiq"],
    projectsCompleted: 13
  },
  {
    firstName: "Olivia",
    lastName: "Lopez",
    department: "Mobile",
    salary: 88000,
    skills: ["Kotlin", "Android", "Firebase", "Java", "SQLite"],
    projectsCompleted: 9
  },
  {
    firstName: "Paul",
    lastName: "Lee",
    department: "DevOps",
    salary: 96000,
    skills: ["GCP", "Terraform", "Kubernetes", "Prometheus", "Grafana"],
    projectsCompleted: 14
  },
  {
    firstName: "Quinn",
    lastName: "Walker",
    department: "Frontend",
    salary: 81000,
    skills: ["Svelte", "JavaScript", "CSS", "HTML", "Webpack"],
    projectsCompleted: 8
  },
  {
    firstName: "Ruby",
    lastName: "Hall",
    department: "Backend",
    salary: 90000,
    skills: ["C#", ".NET", "SQL Server", "Azure", "Docker"],
    projectsCompleted: 12
  },
  {
    firstName: "Sam",
    lastName: "Allen",
    department: "Mobile",
    salary: 87000,
    skills: ["React Native", "Expo", "JavaScript", "Firebase", "Redux"],
    projectsCompleted: 10
  },
  {
    firstName: "Tina",
    lastName: "Young",
    department: "Frontend",
    salary: 83000,
    skills: ["React", "TypeScript", "Styled Components", "GraphQL", "Jest"],
    projectsCompleted: 13
  },
  {
    firstName: "Uma",
    lastName: "King",
    department: "Backend",
    salary: 94000,
    skills: ["Scala", "Akka", "PostgreSQL", "Kafka", "Docker"],
    projectsCompleted: 15
  },
  {
    firstName: "Victor",
    lastName: "Wright",
    department: "DevOps",
    salary: 97000,
    skills: ["AWS", "Terraform", "Jenkins", "Docker", "ELK Stack"],
    projectsCompleted: 16
  },
  {
    firstName: "Wendy",
    lastName: "Green",
    department: "Mobile",
    salary: 85000,
    skills: ["Swift", "UIKit", "Core Data", "iOS", "Xcode"],
    projectsCompleted: 11
  },
  {
    firstName: "Xander",
    lastName: "Adams",
    department: "Backend",
    salary: 92000,
    skills: ["Rust", "Actix", "PostgreSQL", "Redis", "Docker"],
    projectsCompleted: 14
  },
  {
    firstName: "Yara",
    lastName: "Nelson",
    department: "Frontend",
    salary: 86000,
    skills: ["Vue.js", "Nuxt.js", "TypeScript", "Vuex", "CSS"],
    projectsCompleted: 12
  },
  {
    firstName: "Zoe",
    lastName: "Carter",
    department: "Mobile",
    salary: 89000,
    skills: ["Flutter", "Dart", "BLoC", "Firebase", "SQLite"],
    projectsCompleted: 13
  }
];

function getEmployeeProfiles(employees) {
  // თქვენი კოდი აქ
}

function getHighPerformers(employees, salaryThreshold, minProjects) {
  // თქვენი კოდი აქ
}

function getDepartmentAnalytics(employees) {
  // თქვენი კოდი აქ
}

function getSkillExperts(employees, requiredSkills) {
  // თქვენი კოდი აქ
}

function getSkillsReport(employees, targetSkills) {
  // თქვენი კოდი აქ
}

// ტესტები
console.log("=== Employee Profiles ===");
console.log(getEmployeeProfiles(employees));

console.log("\n=== High Performers (Salary >= 90000, Projects >= 12) ===");
console.log(getHighPerformers(employees, 90000, 12));

console.log("\n=== Department Analytics ===");
console.log(getDepartmentAnalytics(employees));

console.log("\n=== Skill Experts (React, TypeScript, CSS) ===");
console.log(getSkillExperts(employees, ["React", "TypeScript", "CSS"]));

console.log("\n=== Skills Report (React, CSS, Docker, Python) ===");
console.log(getSkillsReport(employees, "React,CSS,Docker,Python"));

_____________________________________________________________________________________________________________

task 2 
1.წამოიღეთ მონაცემები 'https://www.swapi.tech/api/starships მისამართიდან
2. დახატეთ ხომალდების სია grid ფორმატში ('name ველი)
3. დაამატეთ ზებნის ფუნქციონალი რომელიც ხომალდებს უნდა ფილტრავდეს სახელის მიხედვით (გაითვალისინეთ რეგისტრტი)
4. დაამატეთ ახალი ხომალდის დამადების ფუნქციონალი ხომალის დამადების შმდეგ ველი უნდა გასუფთავდეს და ხომალდი დაემატოს grid-შ
5. დაამატეთ ფავორიტების ფუნქციონალი ყველა ხომალდს გვერდით ექნება ღილაკი (თეთრი გული) რომელზეც დაჭრის შმდეგააც მოხდება მოცემული ხომალდის ფავორიტებში დამადება, შსაბამისად გული გახდება წითელი. ჭიტელ გულზე დაჭერისას მომხარებელი მოხდება ხომალდის ფავორიტებიდან წაშლა.
6.აჩვენეთ ფავორიტების რაოდენობა 
7. ფავორიტები და ახალი დამატებული ხომალდები შეინახეთ 'localStorage'-ში


--html  

<!DOCTYPE html>
<html lang="ka">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Star Wars Starships Gallery</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="container">
        <h1>🚀 Star Wars Starships Gallery</h1>

        <div class="app-layout">
            <div class="starships-container">
                <div class="search-container">
                    <input
                        type="text"
                        id="searchInput"
                        placeholder="Search starships..."
                    >
                </div>

                <div class="loading-indicator" id="loadingIndicator">
                    Loading starships...
                </div>


                <div class="error-indicator" id="errorIndicator" style="display: none;">
                    <h3>⚠️ Something went wrong</h3>
                    <p>Failed to load starships. Please try again.</p>
                </div>


                <div class="starships-grid" id="starshipsGrid">
                </div>                <div class="no-results" id="noResultsIndicator" style="display: none;">
                    <h3>🔍 No starships found</h3>
                    <p>Try adjusting your search terms.</p>
                </div>
            </div>

            <div class="favorites-container">
                <div class="card">
                    <h2>Add Starship</h2>
                    <div class="add-starship-container">
                        <input
                            type="text"
                            id="addStarshipInput"
                            placeholder="Add new starship to favorites..."
                        >
                        <button id="addStarshipBtn">Add</button>
                    </div>
                </div>

                <div class="card">
                    <h2>Favorites</h2>
                    <div class="favorites-counter">
                        <span>Total favorites: </span>
                        <span class="favorites-count" id="favoritesCount">0</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="script.js"></script>
</body>
</html>





--JS

let allStarships = [];
let favorites = [];

const searchInput = document.getElementById('searchInput');
const starshipsGrid = document.getElementById('starshipsGrid');
const loadingIndicator = document.getElementById('loadingIndicator');
const errorIndicator = document.getElementById('errorIndicator');
const noResultsIndicator = document.getElementById('noResultsIndicator');
const favoritesCount = document.getElementById('favoritesCount');
const retryBtn = document.getElementById('retryBtn');
const addStarshipInput = document.getElementById('addStarshipInput');
const addStarshipBtn = document.getElementById('addStarshipBtn');

document.addEventListener('DOMContentLoaded', function() {
    loadFavorites();
    setupEventListeners();
    fetchStarships();
});

function setupEventListeners() {
    if (searchInput) {
        searchInput.addEventListener('input', handleSearch);
    }

    if (retryBtn) {
        retryBtn.addEventListener('click', () => fetchStarships());
    }

    if (addStarshipBtn) {
        addStarshipBtn.addEventListener('click', addNewStarship);
    }

    if (addStarshipInput) {
        addStarshipInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                addNewStarship();
            }
        });
    }
}

function loadFavorites() {
    favorites = JSON.parse(localStorage.getItem('swapi_starship_favorites')) || [];
    loadCustomStarships();
    updateFavoritesCounter();
}

function loadCustomStarships() {
    const customStarships = [];
    console.log(localStorage.length)

    for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key && key.startsWith('starship_custom_')) {
            const id = key.replace('starship_', '');
            const name = localStorage.getItem(key);
            if (name) {
                customStarships.push({
                    uid: id,
                    name: name,
                    url: null
                });
            }
        }
    }

    allStarships = [...allStarships, ...customStarships];
}

function saveFavorites() {
    localStorage.setItem('swapi_starship_favorites', JSON.stringify(favorites));
}

async function fetchStarships() {
    try {
        showLoading();
        hideError();

        const response = await fetch(`https://swapi.tech/api/starships/`);
        if (!response.ok) {
            throw new Error('Failed to fetch starships');
        }

        const data = await response.json();
        allStarships = data.results;

        loadCustomStarships();

        hideLoading();
        displayStarships(allStarships);

    } catch (error) {
        hideLoading();
        showError();
        console.error('Error fetching starships:', error);
    }
}

function displayStarships(starships) {
    if (starshipsGrid) {
        starshipsGrid.innerHTML = '';
        hideNoResults();

        if (starships.length === 0) {
            showNoResults();
            return;
        }

        starships.forEach(starship => {
            const cardElement = createStarshipCard(starship);
            starshipsGrid.appendChild(cardElement);
        });
    }
}

function createStarshipCard(starship) {
    const card = document.createElement('div');
    card.className = `starship-card ${isFavorite(starship.uid) ? 'favorite' : ''}`;

    card.innerHTML = `
        <span class="starship-name">${starship.name}</span>
        <button class="favorite-btn ${isFavorite(starship.uid) ? 'active' : ''}"
                onclick="toggleFavorite('${starship.uid}', '${starship.name}')">
            <span class="favorite-icon">${isFavorite(starship.uid) ? '❤️' : '🤍'}</span>
        </button>
    `;

    return card;
}

function handleSearch() {
    const searchTerm = searchInput.value.toLowerCase().trim();

    if (searchTerm === '') {
        displayStarships(allStarships);
    } else {
        const filteredStarships = allStarships.filter(starship =>
            starship.name.toLowerCase().includes(searchTerm)
        );
        displayStarships(filteredStarships);
    }
}

function toggleFavorite(starshipId, starshipName) {
    const index = favorites.indexOf(starshipId);

    if (index > -1) {
        favorites.splice(index, 1);
    } else {
        favorites.push(starshipId);
    }

    saveFavorites();
    updateFavoritesCounter();

    if (searchInput && searchInput.value.trim() === '') {
        displayStarships(allStarships);
    } else {
        handleSearch();
    }
}

function isFavorite(starshipId) {
    return favorites.includes(starshipId);
}

function updateFavoritesCounter() {
    if (favoritesCount) {
        favoritesCount.textContent = favorites.length;
    }
}

function addNewStarship() {
    const starshipName = addStarshipInput.value.trim();
    if (starshipName === '') {
        return;
    }

    const newStarshipId = 'custom_' + Date.now();

    const newStarship = {
        uid: newStarshipId,
        name: starshipName,
        url: null
    };

    allStarships.push(newStarship);
    localStorage.setItem(`starship_${newStarshipId}`, starshipName);

    addStarshipInput.value = '';

    if (searchInput && searchInput.value.trim() === '') {
        displayStarships(allStarships);
    } else {
        handleSearch();
    }
}

function showLoading() {
    if (loadingIndicator) loadingIndicator.style.display = 'block';
    if (starshipsGrid) starshipsGrid.style.display = 'none';
    if (errorIndicator) errorIndicator.style.display = 'none';
    if (noResultsIndicator) noResultsIndicator.style.display = 'none';
}

function hideLoading() {
    if (loadingIndicator) loadingIndicator.style.display = 'none';
    if (starshipsGrid) starshipsGrid.style.display = 'grid';
}

function showError() {
    if (errorIndicator) errorIndicator.style.display = 'block';
    if (starshipsGrid) starshipsGrid.style.display = 'none';
    if (loadingIndicator) loadingIndicator.style.display = 'none';
    if (noResultsIndicator) noResultsIndicator.style.display = 'none';
}

function hideError() {
    if (errorIndicator) errorIndicator.style.display = 'none';
}

function showNoResults() {
    if (noResultsIndicator) noResultsIndicator.style.display = 'block';
    if (starshipsGrid) starshipsGrid.style.display = 'none';
}

function hideNoResults() {
    if (noResultsIndicator) noResultsIndicator.style.display = 'none';
    if (starshipsGrid) starshipsGrid.style.display = 'grid';
}









--CSS

@import url("https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap");

:root {
  --background: #09090b;
  --foreground: #f8fafc;
  --card: #1c1c1f;
  --card-foreground: #f8fafc;
  --primary: #336699;
  --primary-foreground: #ffffff;
  --muted: #1c1c1f;
  --muted-foreground: #94a3b8;
  --border: #27272a;
  --radius: 0.5rem;
  --font-sans: "Inter", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
    "Helvetica Neue", Arial, sans-serif;
  --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.3), 0 1px 2px 0 rgba(0, 0, 0, 0.2);
  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.3),
    0 4px 6px -2px rgba(0, 0, 0, 0.2);
}

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  font-family: var(--font-sans);
  background-color: var(--background);
  color: var(--foreground);
  line-height: 1.5;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.container {
  max-width: 1100px;
  margin: 0 auto;
  padding: 2rem 1.5rem;
}

h1 {
  font-size: 1.75rem;
  font-weight: 700;
  margin-bottom: 2rem;
  text-align: center;
  letter-spacing: -0.025em;
  background: linear-gradient(to right, var(--primary), #4d88b8);
  -webkit-background-clip: text;
  background-clip: text;
  -webkit-text-fill-color: transparent;
}

.app-layout {
  display: grid;
  grid-template-columns: 2fr 1fr;
  gap: 1.75rem;
}

@media (max-width: 768px) {
  .app-layout {
    grid-template-columns: 1fr;
  }
}

.starships-container {
  display: flex;
  flex-direction: column;
}

.search-container {
  margin-bottom: 1rem;
}

#searchInput {
  width: 100%;
  padding: 0.75rem 1rem;
  border-radius: var(--radius);
  border: 1px solid var(--border);
  font-family: inherit;
  font-size: 0.875rem;
  outline: none;
  transition: all 0.2s;
  background-color: var(--muted);
  color: var(--foreground);
  margin-bottom: 0.75rem;
}

#searchInput:focus {
  border-color: var(--primary);
  box-shadow: 0 0 0 2px rgba(51, 102, 153, 0.2);
  background-color: rgba(255, 255, 255, 0.03);
}

.starships-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 1rem;
  margin-bottom: 1rem;
}

.starship-card {
  background-color: var(--card);
  border: 1px solid var(--border);
  border-radius: var(--radius);
  padding: 1rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  transition: all 0.2s;
  box-shadow: var(--shadow);
}

.starship-card:hover {
  background-color: rgba(51, 102, 153, 0.1);
  transform: translateY(-1px);
  box-shadow: var(--shadow-lg);
}

.starship-card.favorite {
  background-color: rgba(51, 102, 153, 0.15);
  border-color: var(--primary);
}

.starship-name {
  font-weight: 500;
  color: var(--foreground);
  font-size: 0.875rem;
}

.favorite-btn {
  background: none;
  border: none;
  font-size: 1.2rem;
  cursor: pointer;
  padding: 0.25rem;
  border-radius: 50%;
  transition: all 0.2s;
  display: flex;
  align-items: center;
  justify-content: center;
}

.favorite-btn:hover {
  background-color: rgba(51, 102, 153, 0.2);
  transform: scale(1.1);
}

.favorite-btn.active .favorite-icon {
  color: #ef4444;
}

.pagination-controls {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 1rem;
  margin-top: 2rem;
  padding: 1rem;
}

.pagination-btn {
  background-color: var(--primary);
  color: var(--primary-foreground);
  border: none;
  padding: 0.5rem 1rem;
  border-radius: var(--radius);
  cursor: pointer;
  font-size: 0.875rem;
  font-weight: 500;
  transition: all 0.2s;
}

.pagination-btn:hover:not(:disabled) {
  background-color: #4477aa;
  transform: translateY(-1px);
}

.pagination-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.pagination-info {
  color: var(--muted-foreground);
  font-size: 0.875rem;
  font-weight: 500;
}

.pagination-info strong {
  color: var(--primary);
}

.favorites-counter {
  background-color: var(--muted);
  border: 1px solid var(--border);
  border-radius: var(--radius);
  padding: 0.5rem 1rem;
  font-size: 0.875rem;
  font-weight: 500;
  color: var(--muted-foreground);
}

.favorites-count {
  color: var(--primary);
  font-weight: 600;
}

.loading-indicator {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 2rem;
  color: var(--primary);
  font-size: 0.875rem;
  font-weight: 500;
  letter-spacing: 0.025em;
}

.error-indicator {
  text-align: center;
  padding: 2rem;
  color: var(--muted-foreground);
}

.error-indicator h3 {
  color: #ef4444;
  margin-bottom: 0.5rem;
}

.retry-btn {
  background-color: #ef4444;
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: var(--radius);
  cursor: pointer;
  font-size: 0.875rem;
  font-weight: 500;
  margin-top: 1rem;
  transition: all 0.2s;
}

.retry-btn:hover {
  background-color: #dc2626;
  transform: translateY(-1px);
}

.no-results {
  text-align: center;
  padding: 2rem;
  color: var(--muted-foreground);
}

.no-results h3 {
  margin-bottom: 0.5rem;
  color: var(--foreground);
}

@keyframes pulse {
  0%, 100% {
    opacity: 0.6;
  }
  50% {
    opacity: 1;
  }
}

.loading-indicator {
  animation: pulse 1.5s infinite;
}

.card {
  background-color: var(--card);
  border-radius: var(--radius);
  box-shadow: var(--shadow);
  overflow: hidden;
  padding: 1.25rem;
  border: 1px solid var(--border);
  margin-bottom: 1rem;
}

.card:last-child {
  margin-bottom: 0;
}

h2 {
  font-size: 1.125rem;
  font-weight: 600;
  margin-bottom: 1.25rem;
  color: var(--foreground);
  letter-spacing: -0.025em;
}

.add-starship-container {
  display: flex;
  gap: 0.5rem;
  margin-bottom: 1rem;
}

#addStarshipInput {
  flex: 1;
  padding: 0.75rem 1rem;
  border-radius: var(--radius);
  border: 1px solid var(--border);
  font-family: inherit;
  font-size: 0.875rem;
  outline: none;
  transition: all 0.2s;
  background-color: var(--muted);
  color: var(--foreground);
}

#addStarshipInput:focus {
  border-color: var(--primary);
  box-shadow: 0 0 0 2px rgba(51, 102, 153, 0.2);
  background-color: rgba(255, 255, 255, 0.03);
}

#addStarshipBtn {
  background-color: var(--primary);
  color: var(--primary-foreground);
  border: none;
  padding: 0.75rem 1.25rem;
  border-radius: var(--radius);
  cursor: pointer;
  font-size: 0.875rem;
  font-weight: 500;
  transition: all 0.2s;
  white-space: nowrap;
}

#addStarshipBtn:hover {
  background-color: #4477aa;
  transform: translateY(-1px);
  box-shadow: 0 4px 8px rgba(51, 102, 153, 0.3);
}

#addStarshipBtn:active {
  transform: translateY(0);
}

@media (max-width: 480px) {
  .add-starship-container {
    flex-direction: column;
    gap: 0.75rem;
  }

  #addStarshipBtn {
    width: 100%;
  }
}








--template.html

<!DOCTYPE html>
<html lang="ka">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Star Wars Starships Gallery - Template</title>
    <link rel="stylesheet" href="style.css" />
  </head>
  <body>
    <div class="container">
      <h1>🚀 Star Wars Starships Gallery</h1>

      <div class="app-layout">
        <div class="starships-container">
          <div class="search-container">
            <input
              type="text"
              id="searchInput"
              placeholder="Search starships..."
              value="Death Star"
            />
          </div>

          <!-- Loading State -->
          <div class="loading-indicator">
            Loading starships...
          </div>

          <!-- Error State -->
          <div class="error-indicator">
            <h3>⚠️ Something went wrong</h3>
            <p>Failed to load starships. Please try again.</p>
          </div>

          <!-- No Results State -->
          <div class="no-results">
            <h3>🔍 No starships found</h3>
            <p>Try adjusting your search terms.</p>
          </div>

          <div class="starships-grid">
            <div class="starship-card">
              <span class="starship-name">Death Star</span>
              <button class="favorite-btn" data-id="1">
                <span class="favorite-icon">🤍</span>
              </button>
            </div>

            <div class="starship-card favorite">
              <span class="starship-name">Millennium Falcon</span>
              <button class="favorite-btn active" data-id="5">
                <span class="favorite-icon">❤️</span>
              </button>
            </div>

            <div class="starship-card">
              <span class="starship-name">Imperial Star Destroyer</span>
              <button class="favorite-btn" data-id="4">
                <span class="favorite-icon">🤍</span>
              </button>
            </div>

            <div class="starship-card favorite">
              <span class="starship-name">X-wing</span>
              <button class="favorite-btn active" data-id="10">
                <span class="favorite-icon">❤️</span>
              </button>
            </div>

            <div class="starship-card">
              <span class="starship-name">TIE Fighter</span>
              <button class="favorite-btn" data-id="14">
                <span class="favorite-icon">🤍</span>
              </button>
            </div>

            <div class="starship-card favorite">
              <span class="starship-name">Y-wing</span>
              <button class="favorite-btn active" data-id="20">
                <span class="favorite-icon">❤️</span>
              </button>
            </div>

            <div class="starship-card">
              <span class="starship-name">A-wing</span>
              <button class="favorite-btn" data-id="13">
                <span class="favorite-icon">🤍</span>
              </button>
            </div>

            <div class="starship-card">
              <span class="starship-name">B-wing</span>
              <button class="favorite-btn" data-id="3">
                <span class="favorite-icon">🤍</span>
              </button>
            </div>
          </div>
        </div>

        <div class="favorites-container">
          <div class="card">
            <h2>Add Starship</h2>
            <div class="add-starship-container">
              <input
                type="text"
                id="addStarshipInput"
                placeholder="Add new starship to favorites..."
              />
              <button id="addStarshipBtn">Add</button>
            </div>
          </div>

          <div class="card">
            <h2>Favorites</h2>
            <div class="favorites-counter">
              <span>Total favorites: </span>
              <span class="favorites-count">3</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </body>
</html>























nothing to add?
წამოიღეთ მონაცემები https://swapi.tech/api/starships მისამართიდან
გაითვალისწინეთ, loading და error ინდიკატორები
დახატეთ ხომალდების სია grid ფორმატში (name ველი)
დაამატეთ ძებნის ფუნქციონალი, რომელიც ხომალდებს უნდა ფილტრავდეს სახელის მიხედვით (გაითვალისწინეთ რეგისტრი)
თუ არაფერი მოიძებნა, უნდა გამოჩნდეს შეტყობინება "No starships found"(იხილეთ template.html-ში)
დაამატეთ ახალი ხომალდის დამატების ფუნქციონალი, ხომალდის დამატების შემდეგ ველი უნდა გასუფთავდეს და ხომალდი დაემატოს grid-ში
დაამატეთ ფავორიტების ფუნქციონალი, ყველა ხომალდს გვერდით ექნება ღილაკი (🤍- თეთრი გული) რომელზე დაჭერის შემდეგაც მოხდება მოცემული ხომალდის ფავორიტებში დამატება, შესაბამისად გული გახდება წითელი (❤️). წითელ გულზე დაჭერისას მოხდება ხომალდის ფავორიტებიდან წაშლა
აჩვენეთ ფავორიტების რაოდენობა
ფავორიტები და ახალი დამატებული ხომალდები შეინახეთ localStorage-ში, რომ გვერდის გადატვირთვისას მონაცემები არ დაიკარგოს
